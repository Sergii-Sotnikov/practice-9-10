/*
  –°—Ç–≤–æ—Ä–∏ —Å–ø–∏—Å–æ–∫ —Å–ø—Ä–∞–≤.
  –ù–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ —î –¥–≤–∞ —ñ–Ω–ø—É—Ç–∏ —è–∫—ñ –º–∞—î –≤–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞–∑–≤–∞ —ñ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á—ñ.
  –ü—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "Add" –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ–¥–∞—î—Ç—å—Å—è –¥–æ —Å–ø–∏—Å–∫—É #task-list.

  –£ –∫–æ–∂–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏ –º–∞—î –±—É—Ç–∏ –∫–Ω–æ–ø–∫–∞ "Delete", —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ
  –ø—Ä–∏–±—Ä–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É.
  –°–ø–∏—Å–æ–∫ —ñ–∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ –º–∞—î –±—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–º –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏.

  –†–æ–∑–º—ñ—Ç–∫–∞ –∫–∞—Ä—Ç–∫–∏ –∑–∞–¥–∞—á—ñ
  <li class="task-list-item">
      <button class="task-list-item-btn">Delete</button>
      <h3>–ó–∞–≥–æ–ª–æ–≤–æ–∫</h3>
      <p>–¢–µ–∫—Å—Ç</p>
  </li>
*/
import { nanoid } from 'nanoid';
const formElem = document.querySelector("#task-form");
const listElem = document.querySelector(".tasks-list");
const tasks = initialLocalStorage();
markupTasks(tasks);
formElem.addEventListener('submit', heandlerSbmForm);
listElem.addEventListener('click', handlerClickList);


function initialLocalStorage() { 
  const tasks = JSON.parse(localStorage.getItem("tasks")) || [];
  localStorage.setItem('tasks', JSON.stringify(tasks));
  return tasks;
}

function saveTaskToLocalStorage(task){
  const tasks = JSON.parse(localStorage.getItem("tasks"));
  tasks.push(task);
  localStorage.setItem('tasks', JSON.stringify(tasks));
  return tasks;
}


function heandlerSbmForm(event){
  event.preventDefault();
  const task = {
    id: nanoid(),
    title: event.target.elements.taskName.value.trim(),
    description: event.target.elements.taskDescription.value.trim(),
  }
  saveTaskToLocalStorage(task);
  initialLocalStorage();
  const updatedTasks = initialLocalStorage();
  markupTasks(updatedTasks);
  event.target.reset();
}

function markupTasks(tasks) {
  listElem.innerHTML = "";
  const markup = tasks.map(({id, title, description}) =>{
    return `<li class="task-list-item">
          <button class="task-list-item-btn" data-id="${id}">Delete</button>
          <h3>${title}</h3>
          <p>–¢${description}</p>
          </li>`
  }).join("");
  listElem.insertAdjacentHTML('afterbegin', markup);
}

function handlerClickList(event){
  event.preventDefault();
  if (event.target.nodeName !== 'BUTTON') return;
  const deleteButtonId = event.target.dataset.id;
  const task = JSON.parse(localStorage.getItem("tasks"))
  const updatedTasks = task.filter(task => task.id !== deleteButtonId);
  localStorage.setItem('tasks', JSON.stringify(updatedTasks)); // üîÅ –ó–∞–ø–∏—Å—É—î–º–æ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤
  markupTasks(updatedTasks); // üîÑ –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫—É
}


// createdTasks();


// initialLocalStorage();
// formElem.addEventListener('submit', heandlerFormSubmit);
// const tasks = [...savedTasks];
// function initialLocalStorage(){
// const savedTasks = JSON.parse(localStorage.getItem("tasks")) || [];
// }


// function heandlerFormSubmit(e){
//   e.preventDefault();
//   const titleSubmit = e.target.elements.taskName.value.trim();
//   const descriptionSubmit = e.target.elements.taskDescription.value.trim();
//   const newTask = {
//     id: nanoid(),
//     title: titleSubmit,
//     description: descriptionSubmit,
//   }
//   tasks.push(newTask);
//   localStorage.setItem("tasks", JSON.stringify(tasks));
//   e.target.reset();
//   createdTasks();
// }

// function createdTasks(){
//   listElem.innerHTML = "";
// const markup = tasks.map(({id, title, description})=>{
// return `<li class="task-list-item">
//     <button class="task-list-item-btn" data-id="${id}">Delete</button>
//     <h3>${title}</h3>
//     <p>–¢${description}</p>
// </li>`}).join("");

// listElem.insertAdjacentHTML('afterbegin', markup);
// }

// createdTasks();

// listElem.addEventListener('click', handlerBtnClick)

// function handlerBtnClick(e){
//   e.preventDefault();
//   if (e.target.nodeName !== 'BUTTON') return;
// }
